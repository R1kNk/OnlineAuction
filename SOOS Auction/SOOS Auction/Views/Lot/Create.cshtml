@model SOOS_Auction.Models.LotCreate


<style>
    section {
        position: relative;
        width: 380px;
        height: 160px;
        margin: 40px auto;
        color: #40444f;
        border: .2rem dashed #616778;
        border-radius: 1.5rem;
        cursor: pointer;
        -webkit-transition: color 0.2s ease-out, border-color 0.2s ease-out;
        -moz-transition: color 0.2s ease-out, border-color 0.2s ease-out;
        transition: color 0.2s ease-out, border-color 0.2s ease-out;
        overflow: hidden;
        padding-top: 90px;
        box-sizing: border-box;
    }

        section:hover, section.dd {
            border-color: #4d90ff;
            color: #4d90ff;
            background-color: #e7f0fe;
        }

    figure {
        position: absolute;
        width: 100%;
        height: 160px;
        left: 0;
        top: 0;
        display: block;
    }

        figure:after {
            position: absolute;
            display: block;
            content: '';
            height: 80px;
            width: 80px;
            top: 5px;
            left: 50%;
            margin-left: -40px;
            background-repeat: no-repeat;
            background-size: 80px 80px;
            background-image: url(https://professorweb.ru/my/it/blog/net/images/upload_icon.png);
            -webkit-transition: opacity 0.2s ease-out, border-color 0.2s ease-out;
            -moz-transition: opacity 0.2s ease-out, border-color 0.2s ease-out;
            transition: opacity 0.2s ease-out, border-color 0.2s ease-out;
        }

    section:hover figure:after, section.dd figure:after {
        opacity: .65;
    }

    p {
        text-align: center;
        font-weight: bold;
        font-size: 16px;
        line-height: 24px;
    }

        p small {
            font-weight: normal;
            font-size: 12px;
            opacity: .7;
        }

    [type="file"] {
        position: absolute;
        top: -16rem;
        opacity: 0;
    }

    .error {
        width: 380px;
        margin: 0 auto 20px;
        line-height: 20px;
        font-size: 14px;
        color: red;
        font-style: italic;
        display: none;
        text-align: center;
    }

    /* Прогресс-бар */
    .progress {
        height: 20px;
        width: 380px;
        margin: 0 auto 20px;
        overflow: hidden;
        background-color: #999;
        border-radius: 4px;
        -webkit-box-shadow: inset 0 1px 2px rgba(0,0,0,.1);
        box-shadow: inset 0 1px 2px rgba(0,0,0,.1);
        position: relative;
        display: none;
    }

    .progress-bar {
        height: 100%;
        font-size: 12px;
        float: left;
        width: 0;
        background-color: #428bca;
        -webkit-box-shadow: inset 0 -1px 0 rgba(0,0,0,.15);
        box-shadow: inset 0 -1px 0 rgba(0,0,0,.15);
        -webkit-transition: width .6s ease;
        transition: width .6s ease;
    }

    .progress-value {
        position: absolute;
        left: 0;
        top: 0;
        line-height: 20px;
        height: 100%;
        width: 100%;
        color: #fff;
        text-align: center;
    }

    /* Контейнер с загруженными картинками */
    .images {
        width: 380px;
        overflow: hidden;
        margin: 0 auto;
    }

        .images div {
            width: 116px;
            height: 116px;
            margin: 0 10px 10px 0;
            float: left;
            display: block;
            box-sizing: border-box;
            padding: 4px;
            border: 1px solid #d2d2d2;
            border-radius: 6px;
            position: relative;
        }


        .images a:hover {
            border-color: #428bcb;
        }

        .images span {
            width: 100%;
            height: 100%;
            position: relative;
            top: 0;
            left: 0;
            display: block;
            background-repeat: no-repeat;
            background-size: contain;
            background-position: center;
        }
</style>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h1 style="margin-left:10px;" class="modal-title">Новый лот</h1>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-6">
            @Html.EditorFor(model => model.Name, new { @placeholder = "Краткая информация о лоте, которая будет отображаться на главных страницах", htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.SectionId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-6">
            @Html.DropDownListFor(model => model.SectionId, ViewBag.Sections as SelectList, new { id = "section", @class = "form-control col-md-2" })
            @Html.ValidationMessageFor(model => model.SectionId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.CategoryId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-6">
            @Html.DropDownListFor(model => model.CategoryId, ViewBag.Categories as SelectList, new { id = "category", @class = "form-control" })
            @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.MinimalPrice, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-6">
            @Html.EditorFor(model => model.MinimalPrice, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.MinimalPrice, "", new { @placeholder = "Минимальная цена, с которой начнуться торги", @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.MinimalStep, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-6">
            @Html.EditorFor(model => model.MinimalStep, new { @placeholder = "Минимальный шаг для новой ставки", htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.MinimalStep, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-6">
            @Html.TextAreaFor(model => model.Description, new { @placeholder = "Подробно опишите ваш лот, его состояние, его особенности", @cols = "130", @rows = "5", htmlAttributes = new { @class = "form-control col-md-2" } })
            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.DaysDuration, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-6">
            @Html.EditorFor(model => model.DaysDuration, new { @placeholder = "Сколько дней будет длиться аукцион?", htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.DaysDuration, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-6">
            @Html.DropDownListFor(model => model.Location, ViewBag.Locations as List<SelectListItem>, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ByPost, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-6">
            <div class="checkbox">
                @Html.EditorFor(model => model.ByPost)
                @Html.ValidationMessageFor(model => model.ByPost, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.DeliveryInPerson, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-6">
            <div class="checkbox">
                @Html.EditorFor(model => model.DeliveryInPerson)
                @Html.ValidationMessageFor(model => model.DeliveryInPerson, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ByPostToAnotherCountry, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-6">
            <div class="checkbox">
                @Html.EditorFor(model => model.ByPostToAnotherCountry)
                @Html.ValidationMessageFor(model => model.ByPostToAnotherCountry, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ReturnAfterBuyingIsForbidden, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-6">
            <div class="checkbox">
                @Html.EditorFor(model => model.ReturnAfterBuyingIsForbidden)
                @Html.ValidationMessageFor(model => model.ReturnAfterBuyingIsForbidden, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.AdditionalInformation, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-6">
            @Html.TextAreaFor(model => model.AdditionalInformation, new { @placeholder = "Дополнительная информация о условиях и особенностях доставки (опционально)", @cols = "130", @rows = "5", htmlAttributes = new { @class = "form-control col-md-2" } })
            @Html.ValidationMessageFor(model => model.AdditionalInformation, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.isPaymentBySite, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-6">
            <div class="checkbox">
                @Html.CheckBoxFor(model => model.isPaymentBySite, htmlAttributes: new { @id = "isPaymentBySite" })
                @Html.ValidationMessageFor(model => model.Cash, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group" id="cashContainer">
        @Html.LabelFor(model => model.Cash, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-6">
            <div class="checkbox">
                @Html.CheckBoxFor(model => model.Cash, htmlAttributes: new { @id = "isCash" })
                @Html.ValidationMessageFor(model => model.Cash, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group" id="nonCashContainer">
        @Html.LabelFor(model => model.NonCash, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-6">
            <div class="checkbox">
                @Html.CheckBoxFor(model => model.NonCash, htmlAttributes: new { @id = "isNonCash" })
                @Html.ValidationMessageFor(model => model.NonCash, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group" id="prepaymentContainer">
        @Html.LabelFor(model => model.FullPrepaymentPostSending, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-6">
            <div class="checkbox">
                @Html.CheckBoxFor(model => model.FullPrepaymentPostSending, htmlAttributes: new { @id = "isPrepayment" })
                @Html.ValidationMessageFor(model => model.FullPrepaymentPostSending, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div>
        <h3 style="margin-left:45%;" class="modal-title">Фотографии лота</h3>
        </div>
    <section id="inputSection">
        <figure></figure>
        <p>Загрузка файлов</p>
        <p><small>Перетащите ваши файлы в эту область!</small></p>
        <input type="file" id="input" accept="image/x-png,image/jpeg">
    </section>
    <div class="progress">
        <div class="progress-bar"></div>
        <div class="progress-value">0 %</div>
    </div>
    <div class="error">
    </div>
    <div class="images">
    </div>


</div>
    <div class="row">
        <div class="form-group col-md-2 col-md-offset-5">
            <input style="width:100%; height:50px;" type="submit" value="Создать" class="btn btn-info" />
        </div>
    </div>
}

@section scripts{
    <script type="text/javascript">

        $(function () {
            $('#isPaymentBySite').on('change', function () {
                var state = $('#isPaymentBySite').prop('checked');
                if (state == true) {
                    $('#isCash').prop('checked', false);
                    $('#isNonCash').prop('checked', false);
                    $('#isPrepayment').prop('checked', false);
                    $('#cashContainer').hide();
                    $('#nonCashContainer').hide();
                    $('#prepaymentContainer').hide();
                }
                else {
                    $('#cashContainer').show();
                    $('#nonCashContainer').show();
                    $('#prepaymentContainer').show();
                }
                console.log(state);
            });


            $('figure').on('click', function () {
                $(':file').trigger('click');

            })

            // При перетаскивании файлов в форму, подсветить
            $('section').on('dragover', function (e) {
                $(this).addClass('dd');
                e.preventDefault();
                e.stopPropagation();
            });

            // Предотвратить действие по умолчанию для события dragenter
            $('section').on('dragenter', function (e) {
                e.preventDefault();
                e.stopPropagation();
            });

            $('section').on('dragleave', function (e) {
                $(this).removeClass('dd');
            });

            $('section').on('drop', function (e) {
                if (e.originalEvent.dataTransfer) {
                    if (e.originalEvent.dataTransfer.files.length) {
                        e.preventDefault();
                        e.stopPropagation();


                        upload(e.originalEvent.dataTransfer.files);
                    }
                }
            });

            $(':file').on('change', function () {
                upload($(this).prop('files'));

            });

            $('#section').change(function () {
                // получаем выбранный id
                var id = $(this).val();
                $.ajax({
                    type: 'GET',
                    url: '/Lot/GetCategories?id=' + id,
                    success: function (data) {

                        // заменяем содержимое присланным частичным представлением
                        $('#category').replaceWith(data);
                    }
                });
            });

        });


        function randomString(length) {
            var chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz".split("");
            if (!length) {
                length = Math.floor(Math.random() * chars.length);
            }
            var str = "";
            for (var i = 0; i < length; i++) {
                str += chars[Math.floor(Math.random() * chars.length)];
            }
            return str;
        }

        function delClick(clicked_id) {

            var parent = $("#" + clicked_id).parent()
            var a_href = $(parent).find('a').attr('href');
            console.log(a_href);
            $.ajax({
                url: '/Lot/ImageDelete',
                method: 'POST',
                data: { id: a_href },
                success: function (data) {
                    if (data == "ok") {
                        $('.progress').hide();
                        parent.empty();
                        parent.remove();
                    }
                }
            });
            //alert(parent);
            //console.log(ref);
        }
        // Функция загрузки файлов
        function upload(files) {
            // Создаем объект FormData
            var formData = new FormData();

            // Пройти в цикле по всем файлам
            for (var i = 0; i < files.length; i++) {
                // С помощью метода append() добавляем файлы в объект FormData
                formData.append('file_' + i, files[i]);
            }

            // Ajax-запрос на сервер
            $.ajax({
                type: 'POST',
                url: '/Lot/ImageUpload', // URL на метод действия Upload контроллера HomeController
                data: formData,
                processData: false,
                contentType: false,
                beforeSend: function () {
                    $('section').removeClass('dd');

                    // Перед загрузкой файла удалить старые ошибки и показать индикатор
                    $('.error').text('').hide();
                    $('.progress').show();

                    // Установить прогресс-бар на 0
                    $('.progress-bar').css('width', '0');
                    $('.progress-value').text('0 %');
                },
                success: function (data) {
                    if (data.Error) {
                        console.log("fail");
                        $('.error').text(data.Error).show();
                        $('.progress').hide();
                    }
                    else {
                        console.log("succ");

                        $('.progress-bar').css('width', '100%');
                        $('.progress-value').text('100 %');

                        // Отобразить загруженные картинки
                        if (data.Files) {
                            // Обертка для картинки со ссылкой
                            var id = randomString(6);
                            var img = '<div><btn id="' + id + '"' + ' onclick="delClick(this.id)" style = "position: absolute; height: 16px; width: 16px; top: 0px; right: 0px; z-index: 10; background-image: url(https://png.icons8.com/small/16/000000/delete-sign.png)" ></btn > <a href="0123" target="_blank"><span style="background-image: url(0123)"></span></a></div > ';
                            //var img = '<a href="0" target="_blank"><span style="background-image: url(0)"></span></a>';

                            for (var i = 0; i < data.Files.length; i++) {
                                // Сгенерировать вставляемый элемент с картинкой
                                // (символ 0 заменяем ссылкой с помощью регулярного выражения)
                                var element = $(img.replace(/0123/g, data.Files[i]));

                                // Добавить в контейнер
                                $('.images').append(element);
                            }
                        }
                    }
                },
                xhrFields: { // Отслеживаем процесс загрузки файлов
                    onprogress: function (e) {
                        if (e.lengthComputable) {
                            // Отображение процентов и длины прогресс бара
                            var perc = e.loaded / 100 * e.total;
                            $('.progress-bar').css('width', perc + '%');
                            $('.progress-value').text(perc + ' %');
                        }
                    }
                },
            });
        }
    </script>
}